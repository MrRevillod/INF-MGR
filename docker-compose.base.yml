services:
  server_base:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
    volumes:
      - ./apps/server:/app/apps/server
      - ./lib/services:/app/lib/services
      - ./Cargo.toml:/app/Cargo.toml
      - ./Cargo.lock:/app/Cargo.lock
      - cargo_cache:/usr/local/cargo/registry
      - server_target:/app/target
    ports:
      - "8000:8000"
    networks:
      - my_networks

  client_base:
    build:
      context: .
      dockerfile: ./apps/client/Dockerfile
    volumes:
      - ./apps/client:/app
      - client_node_modules:/app/node_modules
    networks:
      - my_networks

  nginx_base:
    image: nginx:alpine
    ports:
      - "80:80"
    networks:
      - my_networks

  postgres_base:
    image: postgres:15
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_NAME}'" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my_networks

volumes:
  cargo_cache:
  server_target:
    client_node_modules:


networks:
  my_networks:
    driver: bridge
