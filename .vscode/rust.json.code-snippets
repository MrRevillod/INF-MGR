{
  "RepositoryTrait": {
    "scope": "rust",
    "prefix": "repository_trait",
    "body": [
      "use async_trait::async_trait;",
      "use shaku::Interface;",
      "",
      "#[async_trait]",
      "pub trait ${1:RepositoryName} : Interface {",
      "    async fn find_all(&self) -> Result<Vec<${2:Entity}>, ${3:Error}>;",
      "    async fn create(&self, ${4:input}: ${5:CreateInput}) -> Result<${6:Entity}, ${3:Error}>;",
      "    async fn update(&self, ${7:id}: ${8:Id}, ${9:input}: ${10:UpdateInput}) -> Result<${6:Entity}, ${3:Error}>;",
      "    async fn delete(&self, ${11:id}: ${8:Id}) -> Result<(), ${3:Error}>;",
      "}"
    ],
    "description": "Repository trait definition in Rust"
  },
}
